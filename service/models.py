""" Models for the Lore service """
from typing import Optional
from pydantic import BaseModel, Field
from datetime import datetime
from enum import Enum


class MessageType(str, Enum):
    """Type of message being processed"""
    QUESTION = "question"
    ACK = "ack"


class TextChunk(BaseModel):
    """A single chunk of generated text with metadata"""
    request_id: int = Field(..., description="ID of the original request")
    sequence_number: int = Field(..., description="Monotonically increasing sequence number")
    chunk: str = Field(..., description="The text chunk")
    is_final: bool = Field(False, description="Whether this is the last chunk")
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    retries: int = Field(default=0, description="Number of times this chunk has been retried")


class ChunkAck(BaseModel):
    """Acknowledgment of a received chunk"""
    request_id: int = Field(..., description="ID of the original request")
    sequence_number: int = Field(..., description="Sequence number being acknowledged")
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    type: MessageType = Field(default=MessageType.ACK, description="Message type identifier")


class Question(BaseModel):
    """Incoming question payload from the API"""
    request_id: int = Field(..., description="Unique identifier for the help request")
    question: str = Field(..., min_length=1, description="The question being asked")
    user_id: int = Field(..., description="ID of the student asking the question")
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    type: MessageType = Field(default=MessageType.QUESTION, description="Message type identifier")


class Response(BaseModel):
    """Response payload generated by Lore"""
    request_id: int = Field(..., description="ID from original request")
    response: str = Field(..., description="Generated explanation")
    completion_time: float = Field(..., description="Time taken to generate response in seconds")
    token_count: int = Field(..., description="Number of tokens in response")
    timestamp: datetime = Field(default_factory=datetime.utcnow)


class ServiceMetrics(BaseModel):
    """Snapshot of service metrics"""
    questions_processed: int = Field(..., description="Total questions processed")
    error_count: int = Field(..., description="Total errors encountered")
    avg_response_time: float = Field(..., description="Average response time in seconds")
    current_queue_length: int = Field(..., description="Current number of questions in queue")
    avg_token_count: float = Field(..., description="Average tokens per response")
    uptime: float = Field(..., description="Service uptime in seconds")
    active_buffers: int = Field(..., description="Current number of active chunk buffers")
    chunks_sent: int = Field(..., description="Total chunks sent")
    chunks_acknowledged: int = Field(..., description="Total chunks acknowledged")
    buffer_utilization: float = Field(..., description="Average buffer utilization percentage")


class Error(BaseModel):
    """Error information for logging and monitoring"""
    request_id: Optional[int] = Field(None, description="Request ID if available")
    error_type: str = Field(..., description="Type of error encountered")
    error_message: str = Field(..., description="Error description")
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    stack_trace: Optional[str] = Field(None, description="Stack trace if available")
    component: Optional[str] = Field(None, description="Component where error occurred")
    severity: str = Field(default="ERROR", description="Error severity level")

class BufferState(BaseModel):
    """Current state of a chunk buffer"""
    request_id: int = Field(..., description="ID of the request")
    chunks_sent: int = Field(default=0, description="Number of chunks sent")
    chunks_acked: int = Field(default=0, description="Number of chunks acknowledged")
    last_update: datetime = Field(default_factory=datetime.utcnow)
    is_complete: bool = Field(default=False, description="Whether all chunks have been sent")
    window_size: int = Field(..., description="Current window size")
